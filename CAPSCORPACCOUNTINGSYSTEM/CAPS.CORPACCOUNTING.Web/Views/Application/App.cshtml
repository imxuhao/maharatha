@using System.Configuration
@using System.Web.Optimization
@using Abp.Timing
@using Abp.Web.Mvc.Extensions
@using CAPS.CORPACCOUNTING.Localization
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <title>CORPACCOUNTING</title>

    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    @* Fill these meta tags upon your project specification *@
    <meta content="CORPACCOUNTING" name="description">
    <meta content="CORPACCOUNTING" name="keywords">
    <meta content="CORPACCOUNTING" name="author">

    @Scripts.Render("~/Bundles/Frontend/libs/js")
    @Scripts.Render("~/Bundles/Frontend/metronic/js")
    @Scripts.Render("~/Bundles/Common/js")

    <link rel="shortcut icon" href="~/favicon.ico">
    <link href="~/Content/themesChaching/famfamfam-flags.css" rel="stylesheet" />
    <link href="~/Content/themesChaching/simple-line-icons/simple-line-icons.min.css" rel="stylesheet" />
    <link href="http://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|PT+Sans+Narrow|Source+Sans+Pro:200,300,400,600,700,900&amp;subset=all" rel="stylesheet" type="text/css">
    <link href="~/Content/themesChaching/saki-themes/saki-grid-multisearch-5-all-debug.css" rel="stylesheet" />
    <link href="~/Content/themesChaching/chachingGlobalcss.css" rel="stylesheet" />
    <link href="~/libs/sweetalert/sweet-alert.css" rel="stylesheet" />
    <link href="~/libs/toastr/toastr.min.css" rel="stylesheet" />

    <script type="text/javascript">
        @* This is used to get the application's root path from javascript.
        It's useful if you're running application in a virtual directory under IIS. *@
        var abp = abp || {};
        abp.appPath = '@ApplicationPath';
        abp.localization = abp.localization || {};
        abp.localization.defaultSourceName = '@LocalizationSourceName';
    </script>


    <!-- Dynamic scripts of ABP system (They are created on runtime and can not be bundled) -->
    <!-- Dynamic scripts of ABP system (They are created on runtime and can not be bundled) -->
    <script src="~/api/AbpServiceProxies/GetAll?type=angular&v=@(Clock.Now.Ticks)"></script>
    <script src="~/api/AbpServiceProxies/GetAll?v=@(Clock.Now.Ticks)"></script>
    <script src="~/AbpScripts/GetScripts?v=@(Clock.Now.Ticks)" type="text/javascript"></script>

    <style>
        div.mask {
            position: absolute;
            z-index: 1;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.15);
        }
    </style>



</head>
<body style="background-color: #3498db !important">
    <div id="intialLoadinMask" class="cs-loader">
        <div class="cs-loader-inner">
            <label> ●</label>
            <label> ●</label>
            <label> ●</label>
            <label> ●</label>
            <label> ●</label>
            <label> ●</label>
        </div>
    </div>
    @if (ConfigurationManager.AppSettings["Environment"] == "QA")
    {
        <script type="text/javascript">
            var Ext = Ext || {}; // Ext namespace won't be defined yet...

            // This function is called by the Microloader after it has performed basic
            // device detection. The results are provided in the "tags" object. You can
            // use these tags here or even add custom tags. These can be used by platform
            // filters in your manifest or by platformConfig expressions in your app.
            //
            Ext.beforeLoad = function(tags) {
                var s = location.search, // the query string (ex "?foo=1&bar")
                    profile;
                var applicationDir = abp.appPath + 'ExtWeb/build/testing/Chaching/';
                // For testing look for "?classic" or "?modern" in the URL to override
                // device detection default.
                //
                if (s.match(/\bclassic\b/)) {
                    profile = 'classic';
                } else if (s.match(/\bmodern\b/)) {
                    profile = 'modern';
                } else {
                    //profile = tags.desktop ? 'classic' : 'modern';
                    profile = tags.phone ? applicationDir + 'modern' : applicationDir + 'classic';
                }

                Ext.manifest = profile; // this name must match a build profile name

                // This function is called once the manifest is available but before
                // any data is pulled from it.
                //
                //return function (manifest) {
                // peek at / modify the manifest object
                //};
            };
        </script>


        <!-- The line below must be kept intact for Sencha Cmd to build your application -->
        <script id="microloader" data-app="3eaccde9-9942-4e29-8da3-49258118d93c" type="text/javascript" src="../ExtWeb/build/testing/Chaching/microloader.js"></script>
    }
    else if (ConfigurationManager.AppSettings["Environment"] == "PROD" || ConfigurationManager.AppSettings["Environment"] == "STG")
    {
        <script type="text/javascript">
            var Ext = Ext || {}; // Ext namespace won't be defined yet...

            // This function is called by the Microloader after it has performed basic
            // device detection. The results are provided in the "tags" object. You can
            // use these tags here or even add custom tags. These can be used by platform
            // filters in your manifest or by platformConfig expressions in your app.
            //
            Ext.beforeLoad = function(tags) {
                var s = location.search, // the query string (ex "?foo=1&bar")
                    profile;
                var applicationDir = abp.appPath + 'ExtWeb/build/production/Chaching/';
                // For testing look for "?classic" or "?modern" in the URL to override
                // device detection default.
                //
                if (s.match(/\bclassic\b/)) {
                    profile = 'classic';
                } else if (s.match(/\bmodern\b/)) {
                    profile = 'modern';
                } else {
                    //profile = tags.desktop ? 'classic' : 'modern';
                    profile = tags.phone ? applicationDir + 'modern' : applicationDir + 'classic';
                }

                Ext.manifest = profile; // this name must match a build profile name

                // This function is called once the manifest is available but before
                // any data is pulled from it.
                //
                //return function (manifest) {
                // peek at / modify the manifest object
                //};
            };
        </script>


        <script id="microloader" data-app="3eaccde9-9942-4e29-8da3-49258118d93c" type="text/javascript" src="../ExtWeb/build/production/Chaching/microloader.js"></script>

    }
    else
    {
        <script type="text/javascript">
            var Ext = Ext || {}; // Ext namespace won't be defined yet...

            // This function is called by the Microloader after it has performed basic
            // device detection. The results are provided in the "tags" object. You can
            // use these tags here or even add custom tags. These can be used by platform
            // filters in your manifest or by platformConfig expressions in your app.
            //
            Ext.beforeLoad = function(tags) {
                var s = location.search, // the query string (ex "?foo=1&bar")
                    profile;
                var applicationDir = abp.appPath + 'ExtWeb/Chaching/';
                // For testing look for "?classic" or "?modern" in the URL to override
                // device detection default.
                //
                if (s.match(/\bclassic\b/)) {
                    profile = 'classic';
                } else if (s.match(/\bmodern\b/)) {
                    profile = 'modern';
                } else {
                    //profile = tags.desktop ? applicationDir + 'classic' : applicationDir + 'modern';
                    profile = tags.phone ? applicationDir + 'modern' : applicationDir + 'classic';
                }

                Ext.manifest = profile; // this name must match a build profile name

                // This function is called once the manifest is available but before
                // any data is pulled from it.
                //
                //return function (manifest) {
                // peek at / modify the manifest object
                //};
            };
        </script>

        <!-- The line below must be kept intact for Sencha Cmd to build your application -->
        <script id="microloader" data-app="3eaccde9-9942-4e29-8da3-49258118d93c" type="text/javascript" src="~/ExtWeb/Chaching/bootstrap.js"></script>
    }
</body>
</html>
